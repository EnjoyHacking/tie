#!/usr/bin/perl
#
# Script to generate statistics from classification output files
#
# Author: walter.dedonato@unina.it
# Last update: 30/10/2008

use Env;
use File::Basename;
use IO::File;
use Getopt::Std;

# Data structures
# ---------------
my %app_info;    # Table containing applications details taken from "tie_apps.txt"
                 # key: "app_id"        (default)
                 #      "app_id:sub_id" (if -d option is enabled)
                 # value: [0] - label
                 #        [1] - group_id

my %group_info;  # Table containing groups details taken from "tie_groups.txt"
                 # key:   "group_id"
                 # value: [0] - label

my %apps;        # Table containing per application statistics as detected from <class_output>
                 # key:   "app_id"        (default)
                 #        "app_id:sub_id" (if -d option is enabled)
                 # value: [0] - apps_found
                 #        [1] - sessions
                 #        [2] - pkts
                 #        [3] - bytes
my $app_count = 0;    # Counter of applications detected from <class_output>

my %groups;           # Table containing per group statistics as detected from <class_output>
                      # key:   "group_id"
                      # value: [0] - groups_found
                      #        [1] - sessions
                      #        [2] - pkts
                      #        [3] - bytes
my $group_count = 0;  # Counter of groups detected from <class_output>

my %preclass;         # Table containing pre-classification results
                      # key:   "5-tuple + timestamp"
                      # value: "app_id"        (default)
                      #        "app_id:sub_id" (if -d option is enabled)

my %pre_apps;         # Table containing applications information as detected from <pre_class_output>
                      # key:   "app_id"        (default)
                      #        "app_id:sub_id" (if -d option is enabled)
                      # value: [0] - matrix_row
                      #        [1] - sessions
                      #        [2] - pkts
                      #        [3] - bytes
my $pre_app_count = 0;    # Counter of applications detected from [pre_class_output]

my %pre_groups;           # Table containing groups information as detected from <pre_class_output>
                          # key:   "group_id"
                          # value: [0] - matrix_row
                          #        [1] - sessions
                          #        [2] - pkts
                          #        [3] - bytes
my $pre_group_count = 0;  # Counter of groups detected from <pre_class_output>

my %options;              # Command-line options

my @app_ids;              # Array containing app_id values in order of detection
my @group_ids;            # Array containing group_id values in order of detection

my @apps_cm;              # Applications Confusion Matrix (gm_rows * gm_columns)
my $am_rows    = 0;       # Counter of application matrix rows
my $am_columns = 0;       # Counter of application matrix columns

my @groups_cm;            # Groups Confusion Matrix (gm_rows * gm_columns)
my $gm_rows    = 0;       # Counter of group matrix rows
my $gm_columns = 0;       # Counter of group matrix columns

my @sess_count;           # Array containing general session statistics ([0] -> TCP, [1] -> UDP, [2] -> Other)
my @pkts_count;           # Array containing total packets count ([0] -> dwstream, [1] -> upstream)
my @bytes_count;          # Array containing total bytes count ([0] -> dwstream, [1] -> upstream)

my @total_rows;           # Matrix rows sum to be used for normalization

my @modes = ( "none", "session", "packet", "byte" );
my $tie_path;

# Default options
my $sub_ids  = 0;
my $mode     = 1;
my $file_out = 0;
my $prefix   = "";
my $norm     = 0;

# Subroutines
# -----------
# Print help screen
sub print_help {
	print "usage: $0 [options] <class_output>\n";
	print "\noptions:\n";
	print " -c <b|p|s>            populate confusion matrix with bytes/packets/sessions (default)\n";
	print " -d                    consider also sub_ids to differentiate applications\n";
	print " -D                    generate debug output to debug.txt file\n";
	print " -n <r|t>              normalize CSV matrix elements by row/total\n";
	print " -p <pre_class_output> specify a preclassification file to compare results with\n";
	print " -w <prefix>           generate CSV output files using \"prefix\"\n\n";
	die "\n";
}

# Get TIE base directory
sub get_tie_dir {
	if ( -e "tie_stats" ) {
		$tie_path = ".";
	} elsif ( exists $ENV{"TIE_BASE_DIR"} ) {
		$tie_path = $ENV{"TIE_BASE_DIR"};
	} elsif (defined readlink("/usr/local/bin/tie_stats")) {
		$link = readlink("/usr/local/bin/tie_stats");
		$tie_path = dirname($link);
	} else {
		die "Unable to determinate TIE path!\n";
	}
	print "TIE path: $tie_path\n\n";
}

# Parse command-line
sub parser {
	getopts( "c:dDn:p:w:", \%options );
	$ARGV[0] or print_help;

	# Mode
	if ( $options{"c"} eq "s" ) {
		$mode = 1;
	} elsif ( $options{"c"} eq "p" ) {
		$mode = 2;
	} elsif ( $options{"c"} eq "b" ) {
		$mode = 3;
	}

	# Consider sub_ids
	if ( $options{"d"} == 1 ) {
		$sub_ids = 1;
	}

	# Generate CSV output files
	if ( $options{"w"} ) {
		$file_out = 1;
		$prefix   = $options{"w"};
		mkdir("stats");
	}

	# Generate debug output file
	if ( $options{"D"} == 1 ) {
		$debug = 1;
		mkdir("stats");
	}

	# Get prelassification input
	if ( $options{"p"} ) {
		$pre_class = $options{"p"};
		mkdir("stats");
	}

	# Set CSV normalization
	if ( $options{"n"} eq "r" ) {
		$norm = 1;
	} elsif ( $options{"n"} eq "t" ) {
		$norm = 2;
	}
}

# Print a number in human readable format eventually using fixed length
sub human {    # (number, length)
	if ( !$_[0] ) {
		$_[0] = 0;
	}
	if ( $_[0] > 10**12 ) {
		$num = int( $_[0] / 10**12 ) . " T";
	} elsif ( $_[0] > 10**9 ) {
		$num = int( $_[0] / 10**9 ) . " G";
	} elsif ( $_[0] > 10**6 ) {
		$num = int( $_[0] / 10**6 ) . " M";
	} elsif ( $_[0] > 10**3 ) {
		$num = int( $_[0] / 10**3 ) . " K";
	} elsif ( exists $_[1] ) {
		$num = $_[0] . "  ";
	} else {
		$num = $_[0];
	}
	if ( exists $_[1] ) {
		$len = length($num);
		return " " x ( $_[1] - $len ) . $num;
	} else {
		return $num;
	}
}

# Print a string with a fixed length and choosen alignment
sub fix_len {    # (string, length, alignment)
	$len = length( $_[0] );
	if ( $len >= $_[1] ) {

		# Cut string
		if ( !exists $_[2] || $_[2] eq "<" ) {
			return substr( $_[0], 0, $_[1] - 1 ) . " ";
		} elsif ( $_[2] eq ">" ) {
			return " " . substr( $_[0], 0, $_[1] - 1 );
		} elsif ( $_[2] eq "|" ) {
			return " " . substr( $_[0], 0, $_[1] - 2 ) . " ";
		}
	} else {

		# Pad string
		if ( !exists $_[2] || $_[2] eq "<" ) {
			return $_[0] . " " x ( $_[1] - $len );
		} elsif ( $_[2] eq ">" ) {
			return " " x ( $_[1] - $len ) . $_[0];
		} elsif ( $_[2] eq "|" ) {
			$space = ( $_[1] - $len ) / 2;
			$rest  = ( $_[1] - $len ) % 2;
			return " " x ( $space + $rest ) . $_[0] . " " x ($space);
		}
	}
}

# Load applications labels
sub load_app_info {
	my $apps_file = new IO::File( $tie_path . "/tie_apps.txt", "<" ) or print "Warning: Applications definition file not found\n";

	while ( defined( my $line = <$apps_file> ) ) {
		if ( $line =~ /^#.*$/ || $line =~ /^$/ ) {
			next;
		}

		#               app_id        sub_id       group_id            label               sub_label
		if ( $line =~ /^([0-9]+)[,\t]+([0-9]+)[,\t]+([0-9]+)[,\t\"]+([[:alnum:]_.\-()]+)[,\t\"]+([[:alnum:]_.\-()]+)\".*$/ ) {
			if ( $sub_ids == 1 ) {
				$label = "$1:$2";
			} else {
				$label = "$1";
			}

			# Store label
			if ( $2 == 0 || $sub_ids == 0 ) {
				$app_info{$label}[0] = "$4";
			} else {
				$app_info{$label}[0] = "$4 ($5)";
			}

			# Store group_id
			$app_info{$label}[1] = $3;
		}
	}
}

# Load groups labels
sub load_group_info {
	my $groups_file = new IO::File( $tie_path . "/tie_groups.txt", "<" ) or print "Warning: Groups definition file not found\n";

	while ( defined( my $line = <$groups_file> ) ) {
		if ( $line =~ /^#.*$/ || $line =~ /^$/ ) {
			next;
		}

		#               group_id         label
		if ( $line =~ /^([0-9]+)[,\t"]+([[:alnum:]_]+).*$/ ) {
			$group_info{$1}[0] = $2;
		}
	}
}

# Parse <pre_class_output>
sub parse_pre_class {
	my $pre_class_file = new IO::File( $pre_class, "<" ) or die "Pre-classification results file ($ARGV[1]) not found\n";

	# Read pre_class_output and populate preclass hash table
	while ( defined( my $line = <$pre_class_file> ) ) {

		# Skip comments
		if ( $line =~ /^#.*$/ || $line =~ /^$/ ) {
			next;
		}

		#                        1           2           3           4           5           6           7           8           9           10                11          12        13        14
		#                        srcip       dstip       proto       sport       dport       dwpkts      uppkts      dwbytes     upbytes     tstart            tend        appid     subid     conf
		if ( $line =~ /^[0-9]+\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9]+)[0-9\.]+\t([0-9\.]+)\t([0-9]+)\t([0-9]+)\t([0-9]+).*$/ ) {

			#print "key = $1-$2-$3-$4-$5-$10 , value = $11:$12:$13\n";
			if ( $sub_ids == 1 ) {
				$label = "$12:$13";
			} else {
				$label = "$12";
			}
			$preclass{"$1-$2-$3-$4-$5-$10"} = $label;

			# Detect new application
			if ( !exists $pre_apps{$label}[0] ) {
				$app_ids[ $pre_app_count++ ] = $label;
				$pre_apps{$label}[0] = $am_rows++;
				$am_columns++;
			}

			# Per application pre-classification statistics
			$pre_apps{$label}[1]++;
			$pre_apps{$label}[2] += $6 + $7;
			$pre_apps{$label}[3] += $8 + $9;

			# Detect new group
			$glabel = $app_info{$label}[1];
			if ( !exists $pre_groups{$glabel}[0] ) {
				$group_ids[ $pre_group_count++ ] = $glabel;
				$pre_groups{$glabel}[0] = $gm_rows++;
				$gm_columns++;
			}

			# Per group statistics
			$pre_groups{$glabel}[1]++;
			$pre_groups{$glabel}[2] += $6 + $7;
			$pre_groups{$glabel}[3] += $8 + $9;
		}
	}
}

# Parse <class_output> and calculate statistics
sub parse_class {
	my $class_file = new IO::File( "$ARGV[0]", "<" ) or die "Classification results file ($ARGV[0]) not found\n";

	# Open debug output file if -D option is enabled
	$debug == 1 and open( DEBUG, '>', "stats/debug.txt" );
	while ( defined( my $line = <$class_file> ) ) {
		if ( $line =~ /^#.*$/ || $line =~ /^$/ ) {
			next;
		}

		#                        1           2           3           4           5           6           7           8           9           10                11          12        13        14
		#                        srcip       dstip       proto       sport       dport       dwpkts      uppkts      dwbytes     upbytes     tstart            tend        appid     subid     conf
		if ( $line =~ /^[0-9]+\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9\.]+)\t([0-9]+)[0-9\.]+\t([0-9\.]+)\t([0-9]+)\t([0-9]+)\t([0-9]+).*$/ ) {

			#print "key = $1-$2-$3-$4-$5-$10 , value = $11:$12:$13\n";
			if ( $sub_ids == 1 ) {
				$label = "$12:$13";
			} else {
				$label = "$12";
			}
			if ($pre_class) {

				# Read session preclass info
				$pre_label  = $preclass{"$1-$2-$3-$4-$5-$10"};
				$pre_glabel = $app_info{$pre_label}[1];

				# Populate application confusion matrix extra columns labels
				if ( !exists $pre_apps{$label}[0] ) {
					$app_ids[$am_columns] = $label;
					$pre_apps{$label}[0] = $am_columns++;
				}

				# Populate group confusion matrix extra columns labels
				$glabel = $app_info{$label}[1];
				if ( !exists $pre_groups{$glabel}[0] ) {
					$group_ids[$gm_columns] = $glabel;
					$pre_groups{$glabel}[0] = $gm_columns++;
				}

				# Populate application and group confusion matrix values
				if ( $mode == 1 ) {
					$inc = 1;
				} elsif ( $mode == 2 ) {
					$inc = $6 + $7;
				} elsif ( $mode == 3 ) {
					$inc = $8 + $9;
				}
				$apps_cm[ $pre_apps{$pre_label}[0] ][ $pre_apps{$label}[0] ]         += $inc;
				$groups_cm[ $pre_groups{$pre_glabel}[0] ][ $pre_groups{$glabel}[0] ] += $inc;
				if ( $debug == 1 && $label ne $pre_label ) {
					print DEBUG "$1-$2-$3-$4-$5-$10:$label,$pre_label\n";
				}
			}

			# Detect new application
			if ( !exists $apps{$label}[0] ) {
				if   ($pre_class) { $app_count++; }
				else              { $app_ids[ $app_count++ ] = $label; }
				$apps{$label}[0] = $app_count;
			}

			# Per application statistics
			$apps{$label}[1]++;
			$apps{$label}[2] += $6 + $7;
			$apps{$label}[3] += $8 + $9;

			# Detect new group
			$glabel = $app_info{$label}[1];
			if ( !exists $groups{$glabel}[0] ) {
				if   ($pre_class) { $group_count++; }
				else              { $group_ids[ $group_count++ ] = $glabel; }
				$groups{$glabel}[0] = $group_count;
			}

			# Per group statistics
			$groups{$glabel}[1]++;
			$groups{$glabel}[2] += $6 + $7;
			$groups{$glabel}[3] += $8 + $9;

			# Global pkts/bytes statistics
			$pkts_count[0]  += $6;
			$pkts_count[1]  += $7;
			$bytes_count[0] += $8;
			$bytes_count[1] += $9;

			# Global sessions statistics
			if    ( $3 == 6 )  { $sess_count[0]++; }
			elsif ( $3 == 17 ) { $sess_count[1]++; }
			else               { $sess_count[2]++; }
		}
	}
	$debug == 1 and close(DEBUG);
}

# Print global statistics
sub print_trace_stats {
	print "General statistics\n";
	print "------------------\n";
	printf "Sessions: %s (TCP: %s, UDP: %s, Other: %s)\n", &human( $sess_count[0] + $sess_count[1] + $sess_count[2], 5 ), &human( $sess_count[0] ), &human( $sess_count[1] ), &human( $sess_count[2] );
	printf "Packets:  %s (dwstream: %s, upstream: %s)\n", &human( $pkts_count[0] + $pkts_count[1], 5 ), &human( $pkts_count[0] ), &human( $pkts_count[1] );
	printf "Bytes:    %s (dwstream: %s, upstream: %s)\n", &human( $bytes_count[0] + $bytes_count[1], 5 ), &human( $bytes_count[0] ), &human( $bytes_count[1] );
}

# Per application statistics
sub print_stats {    # table, pre_table, matrix, rows, cols, info, ids, descr
	my $table     = $_[0];
	my $pre_table = $_[1];
	my $matrix    = $_[2];
	my $rows      = $_[3];
	my $cols      = $_[4];
	my $info      = $_[5];
	my $ids       = $_[6];
	my $descr     = $_[7];
	my $suffix    = "_" . substr( $modes[$mode], 0, 1 );

	# Open output file if -w option is enabled
	$file_out == 1 and open( OUT, '>', "stats/" . $prefix . "_" . $descr . "_stats" . $suffix . ".csv" );
	if ( !$pre_class ) {

		# From <class_output>
		$line = "Per $descr statistics";
		print "\n$line\n" . "-" x ( length($line) ) . "\n";
		print "Found " . $descr . "s: " . ( $rows - 1 ) . "\n";

		# Table header
		print &fix_len( "Label", 20 ) . &fix_len( "ID", 6 ) . &fix_len( "Sessions", 9, ">" ) . &fix_len( "Packets", 8, ">" ) . &fix_len( "Bytes", 6, ">" ) . "\n";
		print "-" x ( 20 + 6 + 9 + 8 + 6 ) . "\n";

		# Table body
		for ( $i = 0 ; $i < $rows ; $i++ ) {
			$line = &fix_len( $$info{ $$ids[$i] }[0], 20 ) . &fix_len( $$ids[$i], 6 ) . &human( $$table{ $$ids[$i] }[1], 9 ) . &human( $$table{ $$ids[$i] }[2], 8 ) . &human( $$table{ $$ids[$i] }[3], 6 ) . "\n";
			if ( $$info{ $$ids[$i] }[0] eq "UNKNOWN" ) {
				$unknown = $line;
			} else {
				print $line;
			}
			if ( $file_out == 1 ) {
				print OUT $$info{ $$ids[$i] }[0] . "\t" . $$ids[$i] . "\t" . $$table{ $$ids[$i] }[1] . "\t" . $$table{ $$ids[$i] }[2] . "\t" . $$table{ $$ids[$i] }[3] . "\n";
			}
		}

		# Table footer
		print "-" x ( 20 + 6 + 9 + 8 + 6 ) . "\n";
		print $unknown;
	} else {
		my $matched = 0;
		my $total   = 0;
		my $accuracy;

		# Accuracy evaluation
		for ( $i = 0 ; $i < $rows ; $i++ ) {
			if ( $$ids[$i] != 0 ) {
				$matched += $$matrix[$i][$i];
			}

			# Normalization divisors
			$total_rows[$i] = 0;
			for ( $k = 0 ; $k < $cols ; $k++ ) {
				$total_rows[$i] += $$matrix[$i][$k];
				if ( $$ids[$i] != 0 ) {
					$total += $$matrix[$i][$k];
				}
			}
		}
		$accuracy = ( $total ? $matched / $total : 0 ) * 100;

		# From <pre_class_output> vs <class_output>
		$line = "Per $descr statistics (from " . $pre_class . ")";
		print "\n$line\n" . "-" x ( length($line) ) . "\n";
		print "Known " . $descr . "s: " . ( $rows - 1 ) . "\n";
		printf "Accuracy: %.2f %%\n", $accuracy;
		print "-----------------\n";

		# Table header
		print " " x ( 20 + 6 ) . &fix_len( "Matched", 9, ">" ) . &fix_len( "Sessions", 16, "|" ) . &fix_len( "Packets", 16, "|" ) . &fix_len( "Bytes", 16, "|" ) . "\n";
		print &fix_len( "Label", 20 ) . &fix_len( "ID", 6 ) . &fix_len( $modes[$mode] . "s", 9, ">" ) . ( &fix_len( "Known", 8, "|" ) . &fix_len( "Found", 8, "|" ) ) x (3) . "\n";
		print "-" x ( 20 + 6 + 9 + 16 * 3 ) . "\n";

		# Table body
		for ( $i = 0 ; $i < $rows ; $i++ ) {
			$line = &fix_len( $$info{ $$ids[$i] }[0], 20 ) . &fix_len( $$ids[$i], 6 ) . &fix_len( sprintf( "%.1f %%", ( $total_rows[$i] ? $$matrix[$i][$i] / $total_rows[$i] : 0 ) * 100 ), 9, ">" ) . &human( $$pre_table{ $$ids[$i] }[1], 8 ) . &human( $$table{ $$ids[$i] }[1], 8 ) . &human( $$pre_table{ $$ids[$i] }[2], 8 ) . &human( $$table{ $$ids[$i] }[2], 8 ) . &human( $$pre_table{ $$ids[$i] }[3], 8 ) . &human( $$table{ $$ids[$i] }[3], 8 ) . "\n";
			if ( $$info{ $$ids[$i] }[0] eq "UNKNOWN" ) {
				$unknown = $line;
			} else {
				print $line;
			}
			if ( $file_out == 1 ) {
				print OUT $$info{ $$ids[$i] }[0] . "\t" . $$ids[$i] . "\t" . sprintf( "%.1f", ( $$matrix[$i][$i] / $$pre_table{ $$ids[$i] }[$mode] ) * 100 ) . "\t" . $$pre_table{ $$ids[$i] }[1] . "\t" . $$table{ $$ids[$i] }[1] . "\t" . $$pre_table{ $$ids[$i] }[2] . "\t" . $$table{ $$ids[$i] }[2] . "\t" . $$pre_table{ $$ids[$i] }[3] . "\t" . $$table{ $$ids[$i] }[3] . "\n";
			}
		}

		# Table footer
		print "-" x ( 20 + 6 + 9 + 16 * 3 ) . "\n";
		print $unknown;
	}
	$file_out == 1 and close(OUT);
}

# Normalize and print confusion matrix
sub print_matrix {    # matrix, rows, cols, stats, ids, info, descr
	my $matrix = $_[0];
	my $rows   = $_[1];
	my $cols   = $_[2];
	my $stats  = $_[3];
	my $ids    = $_[4];
	my $info   = $_[5];
	my $descr  = $_[6];
	my $value;
	my $suffix = "_" . substr( $modes[$mode], 0, 1 );
	my $sum = 1;

	# Open output file if -w option is enabled
	if ( $file_out == 1 ) {
		open( OUT, '>', "stats/" . $prefix . "_" . $descr . "_matrix" . $suffix . ".csv" );

		# Calculate the sum of all matrix elements
		if ( $norm == 2 ) {
			$sum = 0;

			for ( $i = 0 ; $i < $rows ; $i++ ) {
				for ( $j = 0 ; $j < $cols ; $j++ ) {
					$sum += $$matrix[$i][$j];
				}
			}
		}
	}

	print "\nConfusion Matrix ($descr) (by $modes[$mode]):\n";
	print "-----------------------------" . "-" x ( length($descr) + length($mode) ) . "\n";
	for ( $i = -1 ; $i < $rows ; $i++ ) {

		# Row label
		if ( $i == -1 ) {
			print " " x (9);
			$file_out == 1 and print OUT $modes[$mode] . "\t";
		} else {
			print &fix_len( $$info{ $$ids[$i] }[0], 9, "<" );
			$file_out == 1 and print OUT $$info{ $$ids[$i] }[0] . "\t";
		}

		for ( $j = 0 ; $j < $cols ; $j++ ) {

			# Extra columns separator
			if ( $j == $rows ) { print "  :"; }
			if ( $i == -1 ) {

				# Columns labels
				print &fix_len( $$info{ $$ids[$j] }[0], 9, ">" );
				$file_out == 1 and print OUT $$info{ $$ids[$j] }[0] . "\t";
			} else {

				# Normalization
				$value = ( $total_rows[$i] ? $$matrix[$i][$j] / $total_rows[$i] : 0 ) * 100;

				# Columns values
				if ( $value >= 0.1 ) {
					if ( $i == $j ) {
						print &fix_len( "[" . sprintf( "%.1f", $value ) . "]", 9, ">" );
					} else {
						printf &fix_len( sprintf( "%.1f", $value ), 9, ">" );
					}
				} else {
					print &fix_len( "-", 9, ">" );
				}

				# CSV element output
				if ( $file_out == 1 ) {
					if ( $norm == 0 ) {
						$value = $$matrix[$i][$j] ? $$matrix[$i][$j] : 0;
					} elsif ( $norm == 2 ) {
						$value = ( $$matrix[$i][$j] / $sum ) * 100;
					}

					print OUT ($value) . "\t";
				}
			}
		}
		print "\n";
		$file_out == 1 and print OUT "\n";
	}
	$file_out == 1 and close(OUT);
}

# ---- #
# Main #
# ---- #
get_tie_dir();
parser();
load_app_info();
load_group_info();

# Parse <pre_class_output> (if given)
$pre_class and parse_pre_class();

# Parse <class_output> and calculate statistics
parse_class();

# Print global statistics
print_trace_stats();

# Print per application statistics
print_stats( \%apps, \%pre_apps, \@apps_cm, $pre_class ? $pre_app_count : $app_count, $am_columns, \%app_info, \@app_ids, "app" );

# Print applications confusion matrix (if <pre_class_output> is given)
$pre_class and print_matrix( \@apps_cm, $am_rows, $am_columns, \%pre_apps, \@app_ids, \%app_info, "apps" );

# Print per group statistics
print_stats( \%groups, \%pre_groups, \@groups_cm, $pre_class ? $pre_group_count : $group_count, $gm_columns, \%group_info, \@group_ids, "group" );

# Print groups confusion matrix (if <pre_class_output> is given)
$pre_class and print_matrix( \@groups_cm, $gm_rows, $gm_columns, \%pre_groups, \@group_ids, \%group_info, "groups" );
