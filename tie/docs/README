[ TIE 1.0.0-beta3 ]

   Copyright (c) 2007-2011 Alberto Dainotti, Walter de Donato,
                             Antonio Pescape', Alessio Botta.
   Email: alberto@unina.it, walter.dedonato@unina.it,
          pescape@unina.it, a.botta@unina.it 

   DIS - Dipartimento di Informatica e Sistemistica (Computer Science Department)
   University of Naples Federico II
   All rights reserved.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

*********************************************************************************************
* EXTENDED AND CONSTANTLY UPDATED DOCUMENTATION CAN BE FOUND AT: http://tie.comics.unina.it *
*********************************************************************************************

>>> To quickly build and install TIE read docs/INSTALL <<<


TIE - Traffic Identification Engine
===================================

   TIE is a project for application identification through network traffic
   analysis (aka Traffic Classification, Traffic Identification, etc.).

   We aim at building a common platform for the study and development of
   traffic classification techniques by fostering collaboration among
   researchers and practitioners.

   TIE offers an open-source platform working as a multiple classifier
   system able to combine multiple classification techniques (implemented
   as separate plugins) and adopting different strategies of decision
   combination.


Main features
-------------

     * multiple classification techniques can be run at the same time and
       combined
     * designed to work also with live traffic (realtime mode)
     * opensource, large community participation, geared towards data/tools
       sharing
          * developer's documentation and fully functional examples
          * classification plugins API
          * easy to add extraction of new classification features
          * easy to add new decision combination strategies
          * easy to provide ground-truth along with anonymized traces
     * graph & web report generation
     * runs on Linux and FreeBSD


Documentation summary:
======================

README		 - this file. Read it first
INSTALL		 - installation instructions 
EXAMPLES	 - some examples of command-line use (more to come..) 
OUTPUT		 - specifications of the output generated by TIE
DEVELOPERS       - TIE developer manual
DEVELOPERS.class - TIE classifier developer manual

Operating Modes
===============

   When classifying traffic, TIE can operate in three different modes:
   Offline, Realtime, and Cyclic.

  Offline (default)
  -----------------

     * TIE analyzes live traffic or a traffic trace. Information regarding
       the classification of a session is generated only when the session
       ends or at the end of program execution.
     * This operating mode is typically used by researchers testing
       classification techniques, when there are no timing requirements
       regarding classification output and user is interested in obtaining
       information regarding entire session lifetime.

  Realtime
  --------

     * TIE analyzes live traffic. Information regarding the classification
       of a session is generated as soon as it is available.
     * Timing constraints are strict. Typical usage is for policy
       enforcement of classified traffic (QoS, Admission, Billing,
       Firewalling, etc.)

  Cyclic (currently under development)
  ------

     * TIE generates a new output file at regular intervals (e.g. each 5
       minutes). Each output file contains information regarding sessions
       that generated traffic during the corresponding interval.
     * Typical usage is for building reporting graphs and web pages (see
       "Web Reporting HowTo")

Executables
===========

   TIE consists of an executable (tie) and a set of classifier plugins.
   Plugins are built as shared objects, that can be dynamically loaded at
   runtime, fetched from the plugins/ directory. Each Plugin has its own
   configuration files for plugin-specific options and signatures.

Command line options
=====================

Below, all command line options are summarized. 
See file "EXAMPLES" to find some typical examples of TIE usage.
Besides such options, it is possible to specify filters in tcpdump/bpf syntax at the
end of the command line (as in tcpdump). This allows to "a priori" discard some packets.

NOTE:
-----	Some classifier plugins will disable themselves (lamenting
	"some requisites not satisfied") if needed options are not
	specified on command line: check the plugin specific documentation
	if this happens.

MAIN OPTIONS:

-m mode     set the operating mode.
            mode can be:
                'o'  for offline mode (default)
                'c'  for cyclic mode
                'r'  for realtime mode
-q type     session type definition.
            type can be:
                'h'  for host
                'f'  for flow
                'b'  for biflow (default)
-t num      set sessions timeout (in seconds)
-i if       read packets from interface 'if'
-r file     read traffic from 'file' in pcap format
-l trsld    enable classifiers training using 'trsld' as threshold value (disables classification)
-k          enable classification when -l option is specified
-s num      set snaplen when capturing traffic

FEATURE RELATED OPTIONS:
                                                                                                                                                                                    
-p num      store the first 'num' payload sizes of each session                                                                                                                     
-b num      store the first 'num' packet sizes of each session                                                                                                                      
-P num      store payload content of first packet in each direction (only num bytes per packet)                                                                                     
-S num      store num bytes of payloads stream per session                                                                                                                          
-I num      save the first 'num' IPTs of each session                                                                                                                               
                                                                                                                                                                                    
FILTERING OPTIONS:                                                                                                                                                                  
                                                                                                                                                                                    
-C num      skip the first 'num' packets                                                                                                                                            
-c num      stop after 'num' packets                                                                                                                                                
-D 0-6      consider only packets from a specific day of week                                                                                                                       
-F path     use BPF file specified in 'path' to filter out packets
-T string   set a specific time range you want analyze. Time range is a string must be i
-Z num      set a custom timezone offset
-f          disable filter

Tcpdump/bpf style filters can be specified at the end of the command line
(e.g. for HTTP launch: "./tie [options] tcp port 80").

OTHER OPTIONS:

-a num      set cyclic mode interval duration in seconds
-d path     output directory
-e file     classification results input file name
-E file     classification results ouput file name
-L suffix   set the suffix to append to file containing training result
-h          print help and exit
-H path     read host table from file
-M num      perform periodical dump of data and garbage collection each num packets (def
-o ip port  enable classification notifications toward a remote host
-O          use persistent connection to a remote host
-n          write classification output using labels instead of IDs
-w path     dump traffic to file 'pathtofile'
-W num      dump packet contents in pcap file containing up to L4 headers plus 'num' byt
-x          enable TCP heuristics (watching SYN/FIN flags)

Output
======
See file "OUTPUT" for information about the output files produced by TIE


Signals
=======
TIE ignores the SIGHUP signal, so it is possible to exit from the shell and
leave the program running.
You can stop it with a SIGINT signal.

