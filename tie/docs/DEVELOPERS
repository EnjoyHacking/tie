
                      Developer Manual (version 1.0.0-beta3)

   WARNING: This document refers to a project in active development, so it
   can undergo heavy and frequent changes. 
   For updated documentation please see: tie.comics.unina.it

   Most developers are probably interested in writing a new classification
   plugin: for this purpose specific information can be found in the
   DEVELOPERS.class file. See also plugin specific documentation.

Definitions
===========

  Classification Plugin

   TIE is able to manage an expandable set of classification techniques,
   each one implemented as a dynamically loadable software module, called
   classification plugin (or shortly classifier).

  Signatures

   Each classification plugin operates a classification attempt against a
   set of signatures, contained in a plugin-specific signature file. This
   file is usually already available but a new one can be sometimes
   (depending on the specific technique implemented) generated by the
   plugin itself during learning mode.

  Sessions

   TIE decomposes network traffic into sessions. Each session is separately
   classified (i.e. assigned to an application).

   TIE supports multiple types of session (to be chosen at startup), with
   the simplest one corresponding to the common definition of flow.

   Sessions classified by TIE can be of type (type is chosen at startup):
   flow, biflow, host.

     * flow
       Traffic is decomposed into flows. A traffic flow is identified by
       the tuple <source_host, source_port, destination_host,
       destination_port, transport_protocol> and an inactivity timeout
       (default is 60s).
     * biflow
       Traffic is decomposed into biflows. A biflow is identified by the
       tuple <source_host, source_port, destination_host, destination_port,
       transport_protocol>, where source and destination can be swapped,
       and an inactivity timeout (default is 60s). This is to consider
       traffic flowing in both directions as generated by a single
       application.
     * host (CURRENTLY UNDER DEVELOPMENT)
       analyze all packets generated from a single host.

Architecture
============

   TIE platform can be broken down into logical blocks. 
   
   |Plugin |                  |Decision|--\--| Output  |
   |Manager|                  |Combiner|--/--|Generator|
                                  /\
                                  ::
   |Packet|--\--|Session|--\--| Feature | 
   |Filter|--/--|Builder|--/--|Extractor|
                                  ::
                                  \/
                              |   Pre-   |--\--|Classifiers|
                              |classifier|--/--|  Trainer  |
   
   Some of them are executed only in specific use cases.
   
   In the following there is a brief description of such blocks with
   references to the source code.

  Packet Filter
  -------------

   Captures traffic from network interfaces or from a traffic trace saved
   in libpcap format.

   Before passing traffic to subsequent block (Session Builder) filters out
   packets that trigger rules specified by command line options2). Packets
   failing integrity checks are dropped, too.

   Source files 
   tie.c        

                              Relevant functions
   main_loop()     gets packets from data source (interface or trace file)  
   filter_packet() filters out packets according to integrity checks and    
                   command line options                                     

  Session Builder
  ---------------

   TIE processing revolves around a sessions table. Each session structure
   in the table contains

     * Status Information
     * Flags
     * Counters
     * Features

   The Session Builder receives packets accepted by previous stage (packet
   filter) and aggregates them in sessions according to the current session
   type. Each session is stored into a hash table, as reported hereafter.

   Session type  Hash table  
   flow         flow_table   
   biflow       biflow_table 
   host         host_table   

       Source files      
   biflow/biflow_table.* 
   flow/flow_table.*     
   host/host_table.*     

                       Relevant data structures
   struct ft_entry flow chain related to the same 5-tuple           
   struct flow     all needed information about a flow              
   struct bt_entry biflow chain related to the same 5-tuple         
   struct biflow   all needed information about a biflow            
   struct ht_entry host chain related to the same 5-tuple           
   struct host     all needed information about a host session type 

  Feature extraction
  ------------------

   This block collects, for each session, the features needed by
   classifiers. Except for a few ones, only the features specified by
   command line options3) are collected.

   Each classifier, if the collection of the features it needs is not
   enabled, disables itself.

   At the moment, features available to classifiers are:

             Always available            
   number of packets upstream/downstream 
   payload bytes upstream/downstrem      
   source/destination port               
   transport layer protocol              

                   Available ON DEMAND           
                      Feature                    option 
   Inter Packet Time between the first n packets   -I     
   Packet Size of the first n packets              -p     
   First n bytes of first packet                   -P     
   (in both directions in biflow mode)           
   Session payload stream of n bytes               -S     

   Source files 
   tie.c        

  Decision combiner
  -----------------

   This block is responsible of taking a decision on the classification of
   a session evaluating the results returned by different classifiers. For
   each session, the decision is taken only if all enabled classifiers are
   ready to classify it. In that case the combiner, using different
   schemes, can compute a final decision and tags the session with the
   corresponding application identifier (app_id), sub-application
   identifier (sub_id) and a confidence value from 0 to 100.

     Source files   
   class/combiner.c 

       Relevant functions     
   classify_session()         
   is _session_classifiable() 

  Output Generator
  ----------------

   This section takes care of printing the result of classification and
   other statistics on log files and on stdout.

   Output file names (and directories) can be specified by command line
   options.

   The pace of output dump depends upon the work mode, as described in the
   following. On every dump, a new output file is generated (with a
   timestamp in its name), and all counters are reset; so that each output
   file will contain data and statistics referred only to its time span.

     * Offline
       For each garbage collection on the session table, a dump is made for
       all expired sessions.
       On graceful closing of tie process, a dump is made for all sessions
       left in the table, expired or not.
     * Realtime
       When processing traffic on the wire, file output is done as soon as
       classification is done. If enabled, output is asynchronously written
       to socket for remote logging.
     * Cyclic
       At the end of each processing interval (set by command line option
       the garbage collector is called and the output related to expired
       sessions is dumped.

        Source files      
   output/*               
   flow/flow_output.*     
   biflow/biflow_output.* 
   host/host_output.*     

                              Relevant functions
   store_result()  Dumps output data and statistics on the output file      
                   (default "class.out")                                    
   open_log_file() Creates the new output file and populates its header     

  Pre-classifier
  --------------

   This block classifies each session in the trace according to a
   pre-classification data file. Such a file is created by earlier
   classification, processing the same input traffic trace, and is in t2
   format.

         Source files        
   class/preclassification.* 

  Classifiers Trainer
  -------------------

   This block calls, for each enabled classifier, plugin function train(),
   exerting training against pre-classified traffic build by the
   Pre-Classifier block.

   This way the plugin creates its own signature file, based on both the
   input traffic trace and the pre-classified data.

    Source files   
   tie.c           
   plugin specific 



